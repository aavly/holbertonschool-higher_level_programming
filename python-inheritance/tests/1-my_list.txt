========================
Using 1-my_list.py
========================


First import ``MyList`` from the ``1-my_list.py`` file:
==============================================================
   >>> MyList = __import__('1-my_list').MyList


Tests:
=======

Regular tests
==============

Test case #1: Check append and various prints

    >>> my_list = MyList()
	>>> my_list.append(4)
	>>> my_list.append(2)
	>>> my_list.append(3)
	>>> print(my_list)
	[4, 2, 3]
	>>> my_list.print_sorted()
	[2, 3, 4]
	>>> print(my_list)
	[4, 2, 3]

Test case #2: Check inherits from list

	>>> isinstance(my_list, list)
	True

Test case #3: Empty parameters

	>>> my_list = MyList()
	>>> print(my_list)
	[]


Error causing tests:
====================

	my_list = MyList(-3)
	print_sorted(my_list)
	Traceback (most recent call last):
	...
	TypeError: 'int' object is not iterable

	my_list = MyList(3)
	Traceback (most recent call last):
	...
	TypeError: 'int' object is not iterable

	my_list = MyList(3.14)
	Traceback (most recent call last):
	...
	TypeError: 'float' object is not iterable

	my_list = MyList()
	Traceback (most recent call last):
	...
	TypeError: 'NoneType' object is not iterable

	>>> my_list.print_sorted([2, 3, 4, 5])
	Traceback (most recent call last):
	...
	TypeError: print_sorted() takes 1 positional argument but 2 were given

	>>> my_list.print_sorted((2, 3, 4, 5))
	Traceback (most recent call last):
	...
	TypeError: print_sorted() takes 1 positional argument but 2 were given